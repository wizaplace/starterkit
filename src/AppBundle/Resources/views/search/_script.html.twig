<script>
    var urlParameters;

    var search = new SearchClient('{{ apiBaseUrl }}catalog/search/products', '{{ apiBaseUrl }}/catalog/search/products/autocomplete');
    urlParameters = search.restoreSearchFromUrl();

    new Vue({
        el: '#search-page',
        delimiters: ['${','}'],
        data: {
            loading: true,
            products: [],
            favoriteIds: JSON.parse('{{ userFavoriteIds|json_encode|raw }}') || [],
            facets: [],
            query: urlParameters.query || '',
            pagination: {
                page: urlParameters.page || 1,
                resultsPerPage: urlParameters.resultsPerPage || 12
            },
            filters: urlParameters.filters || {{ filters|default({})|json_encode|raw }},
            sorting: urlParameters.sorting || {},
            geoFilter: urlParameters.geoFilter
        },
        methods: {

            // refresh search results (without page reload)
            refresh: function () {
                this.loading = true;
                var self = this;

                search.searchProducts(this.query, this.pagination.page, this.pagination.resultsPerPage, this.filters, this.sorting, this.geoFilter, {}, function (response) {
                    self.loading = false;
                    self.products = response.results;
                    self.pagination = response.pagination;

                    // filter returned facets
                    Object.keys(response.facets).map(function (attributeId) {
                        var variants = response.facets[attributeId];
                        Object.keys(variants).map(function (variantId) {

                            // remove reverse attribute search (∅)
                            if (variantId === 'values') {
                                for (var valueId in response.facets[attributeId][variantId]) {

                                    // remove ∅ variant
                                    if (valueId === '∅') {
                                        delete response.facets[attributeId][variantId][valueId];
                                    }
                                }
                            }
                        });
                    });

                    // save facets
                    self.facets = response.facets;

                    // change url to reflect search parameters (query, pagination, etc.)
                    search.saveSearchInUrl(self.query, self.pagination.page, self.pagination.resultsPerPage, self.filters, self.sorting, self.geoFilter);

                    // open sidebar category tree to show the selected one
                    Vue.nextTick(function () {
                        self.refreshCategoryTree();
                    });
                });
            },


            // sort and filter
            // ===============

            setSort: function(criteria, direction) {
                if(criteria ===  null) {
                    this.sorting = null;
                } else {
                    this.sorting = {};
                    this.sorting[criteria] = direction;
                }
                this.refresh();
            },

            // number of results per page
            changeResultsNumber: function (_resultsPerPage) {
                this.pagination.resultsPerPage = _resultsPerPage;
                this.refresh();
            },

            /**
             * facetName représente le nom d'un attribut. Exemple: couleur
             * variantName correspond à la valeur sélectionnée. Exemple: blanc
             * */
            toggleFilter: function (facetName, variantName) {

                // désélection d'une valeur déjà présente dans le tableau des filtres
                if ( this.filters.hasOwnProperty(facetName) && _.includes(this.filters[facetName], variantName) ) {

                    // si la valeur est le seul élément du tableau, on supprime le filtre entièrement
                    if (this.filters[facetName].length < 2) {
                        Vue.delete(this.filters, facetName);

                    // sinon on enlève simplement la valeur du tableau
                    } else {
                        this.filters[facetName].splice(this.filters[facetName].indexOf(variantName), 1);
                    }

                // sélection d'une nouvelle valeur
                } else {

                    // récupère sous forme de tableau les valeurs éventuellement déjà sélectionnées
                    // pour y ajouter la valeur qui vient juste d'être sélectionnée
                    var variantNames = _.values(this.filters[facetName]);
                    variantNames.push(variantName);

                    // met à jour le tableau de filtres de l'attribut avec le tableau de ses valeurs
                    Vue.set(this.filters, facetName, variantNames);
                }
                this.refresh();
            },

            // use `isChecked()` to know when a radio button or a checkbox has to be checked (needed after a refresh)
            isChecked: function(facetName, variantName) {
                return this.filters.hasOwnProperty(facetName) && _.includes(this.filters[facetName], variantName);
            },

            // e.g. price slider
            updateNumericFilter: function (facetName, min, max) {
                if (!this.filters[facetName]) {
                    this.filters[facetName] = {};
                }
                this.filters[facetName]['min'] = min;
                this.filters[facetName]['max'] = max;
                this.refresh();
            },

            clearFilters: function () {
                // Clear everything except the selected category
                for (var property in this.filters) {
                    if (property !== 'categories' && this.filters.hasOwnProperty(property)) {
                        Vue.delete(this.filters, property);
                    }
                }

                this.refresh();
            },

            // order facets by position
            orderFacets: function (values) {

                // save facet key as it will be lost on ordering process
                _.forEach(values, function (value, key) {
                    value.key = key;
                });

                return _.orderBy(values, 'position');
            },


            // pagination
            // ==========

            goToPage: function (page) {
                page = Math.max(1, page); // cannot go below page 1
                page = Math.min(this.pagination.nbPages, page); // cannot go over total number of pages
                this.pagination.page = page;

                // got to page top
                var $container = $('html, body');
                var $ref = $("#search-page");
                $container.animate({ scrollTop: $ref.offset().top - $container.offset().top }, 'fast');

                this.refresh();
            },

            range: function (a, b) {
                var rangeArray = [];

                for(var i = a; i < b; i++) {
                    rangeArray.push(i);
                }

                return rangeArray;
            },


            // product cards
            // =============

            imageUrl: function (product, dimension) {
                if(product.mainImage != null) {
                    return "{{ apiBaseUrl }}image/" + product.mainImage.id + "?w=" + dimension + "&h=" + dimension;
                } else {
                    return "{{ asset('images/no-image.jpg') }}"
                }
            },

            productUrl: function (product) {
                var categorySlugPath = [];
                for (var i in product.categoryPath) {
                    categorySlugPath.push(product.categoryPath[i].slug);
                }
                return Routing.generate('product', {slug: product.slug, categoryPath: categorySlugPath.join('/')});
            },

            /**
             * use `getDiscount()` in template to get discount percentage, e.g.:
             *
             * <div v-for="product in products">
             *     <span class="discount-percentage">${ getDiscount(product) }</span>
             * </div>
             */
            getDiscount: function(product) {
                if(! product.crossedOutPrice) { return }

                var oldPrice = product.crossedOutPrice;
                var newPrice = product.minimumPrice;
                var discount = ((newPrice - oldPrice) * 100 / oldPrice);
                return Math.round(discount);
            },

            /**
             * use `isNewProduct()` in template to know when to display a 'new' label, e.g.:
             *
             * <div v-for="product in products">
             *     <span class="new-product" v-if="isNew(product)">{{ "new"|trans }}</span>
             * </div>
             */
            isNew: function (product) {
                var aWeekAgo = moment().subtract(7, 'days');
                return moment.unix(product.createdAt).isAfter(aWeekAgo);
            },

            // add product to basket and display confirmation modal
            addToBasket: function(product) {

                // productData will be used to hydrate modal
                var productData = {
                    name: product.name,
                    price: product.minimumPrice,
                    image: this.imageUrl(product),
                };

                $.ajax({
                    type: "POST",
                    url: "{{ path('basket_add_product') }}",
                    data: { declinationId: product.mainDeclination.id, quantity: 1 },
                    success: function(response) {
                        hydrateModal(productData, 1, response.message);
                    }
                });
            },


            // sidebar categories
            // ==================

            refreshCategoryTree: function() {
                var $selectedCategory = $('#categories').find('.selected-category');

                // open category tree
                $selectedCategory.parents('#categories.collapse, #categories .collapse').addClass('in');
            },

            isCurrentCategory: function(categoryId) {
                return this.filters['categories'] == categoryId;
            },

            inFavorites: function (product) {
                return this.favoriteIds.indexOf(product.mainDeclination.id) > -1;
            },

            addToFavorites: function (product) {
                helper.displayLoadingSpinner();

                var self = this;

                $.ajax({
                    type: "POST",
                    url: "{{ path('add_to_favorites') }}",
                    data: { declinationId: product.mainDeclination.id },
                }).done(function() {

                    // add product to local favorites array
                    self.favoriteIds.push(product.mainDeclination.id);

                    notification.createAlert("{{'product.favorite.successfully_added'|trans}}", "success");
                }).fail(function (err) {

                }).always(function () {
                    helper.removeLoadingSpinner();
                });
            },

            removeFromFavorites: function (product) {
                helper.displayLoadingSpinner();

                var self = this;

                $.ajax({
                    type: "POST",
                    url: "{{ path('remove_from_favorites') }}",
                    data: { declinationId: product.mainDeclination.id },
                }).done(function() {

                    {# remove product from local favorites array #}
                    self.favoriteIds.splice(self.favoriteIds.indexOf(product.mainDeclination.id), 1);

                    notification.createAlert("{{'product.favorite.successfully_removed'|trans}}", "success");
                }).fail(function (err) {

                }).always(function () {
                    helper.removeLoadingSpinner();
                });
            }
        },

        mounted: function () {
            // Trigger the first refresh
            this.refresh();
        },

        filters: {
            price: helper.formatPrice
        }
    });

    // price slider
    Vue.component('slider', {
        template: '#slider-template',

        props: ['min', 'max'],

        data: function () {
            return {
                currentMin: this.min,
                currentMax: this.max
            }
        },

        activated: function () {
            var view = this;

            var facetSlider = document.getElementById('facet-slider');
            noUiSlider.create(facetSlider, {
                start: [Math.floor(view.min), Math.ceil(view.max)],
                step: 1,
                connect: true,
                range: {
                    'min': Math.floor(view.min),
                    'max': Math.ceil(view.max)
                }
            });

            // display correct values while sliding
            facetSlider.noUiSlider.on('slide', function (values) {
                view.currentMin = Math.floor(values[0]);
                view.currentMax = Math.ceil(values[1]);
            });

            // trigger search refresh when sliding is done
            facetSlider.noUiSlider.on('end', function () {
                view.$emit('update', view.currentMin, view.currentMax);
            });
        }
    });
</script>
