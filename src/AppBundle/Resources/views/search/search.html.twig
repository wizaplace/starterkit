{% extends '@App/layout-search.html.twig' %}

{% block body %}

    <div class="container-fluid" id="search-content" v-cloak>

        <div class="row">
            <div class="col-md-12 text-center">
                <div class="label" >&nbsp;<span v-if="pagination.nbResults">${pagination.nbResults+' Résultats'}</span></div>
                <div class="big-title"></div>
                {% if currentCategory|default %}
                    <p>dans {{ currentCategory.name }}</p>
                {% endif %}
            </div>
        </div>

        <div class="row">
            <div class="col-xs-9">
                <div class="btn-group btn-group-lg" role="group" aria-label="...">
                    <button type="button" class="btn btn-default" @click="setSort(null, null)">Pertinence</button>
                    <button type="button" class="btn btn-default" @click="setSort('name', 'asc')">Nom A-Z</button>
                    <button type="button" class="btn btn-default" @click="setSort('name', 'desc')">Nom Z-A</button>
                    <button type="button" class="btn btn-default" @click="setSort('price', 'asc')">Prix - à +</button>
                    <button type="button" class="btn btn-default" @click="setSort('price', 'desc')">Prix + à -</button>
                </div>
            </div>
            <div class="col-xs-3">
                <div class="btn-group btn-group-lg pull-right" role="group" aria-label="...">
                    <button type="button" class="btn btn-default active" @click="changeResultsNumber(12)">12</button>
                    <button type="button" class="btn btn-default" @click="changeResultsNumber(24)">24</button>
                    <button type="button" class="btn btn-default" @click="changeResultsNumber(48)">48</button>
                </div>
            </div>
        </div>

        <div class="row">

            {# sidebar #}
            <div class="col-md-2">
                {% include '@App/search/sidebar/sidebar.html.twig' %}
            </div>

            {# search result #}
            <div class="col-md-10">
                <div class="row">
                    <div class="col-md-12">
                        <div class="product" v-for="product in products">
                            {# promo badge #}
                            <div class="top-badge badge-promo" v-if="product.crossedOutPrice !== null">PROMO</div>

                            <a class="product-detail" :href="productUrl(product)">
                                <div class="product-image" :style="imageStyle(product)"></div>
                                <div class="product-caption">
                                    <div class="title ellipsis">${product.name}</div>
                                    <div class="ellipsis">${ product.subtitle }</div>
                                </div>
                            </a>

                            <div class="product-price">
                                <div class="pull-left">
                                    <span v-if="product.crossedOutPrice !== null" class="title">${product.minimumPrice|price}&nbsp;TTC</span><br />
                                    <span v-if="product.crossedOutPrice !== null" class="title text-blue text-line-through">${product.crossedOutPrice|price}&nbsp;TTC</span>
                                    <span v-else class="title">${product.minimumPrice|price}&nbsp;TTC</span><br />
                                </div>
                                <button class="add-to-basket btn btn-link pull-right" @click="submitBasket(product)" title="Ajouter au panier">
                                    <span aria-hidden="true" class="glyphicon glyphicon-shopping-cart"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                {# pagination #}
                <div class="row">
                    <div class="col-md-12 text-center">
                        <nav v-if="pagination.nbPages > 1">

                            <ul class="pagination-block list-inline">
                                {# go to previous page #}
                                <li :class="{disabled: pagination.page == 1}">
                                    <a href="#" @click.prevent="goToPage(pagination.page - 1)">
                                        <span class="glyphicon glyphicon-arrow-left"></span>
                                    </a>
                                </li>

                                {# 3 pages previous to current page #}
                                <li v-for="i in range(pagination.page -3, pagination.page)" v-if="i > 0">
                                    <a href="#" @click.prevent="goToPage(i)" class="page-number">${i}</a>
                                </li>

                                {# current page #}
                                <li class="active">
                                    <a href="#" @click.prevent="goToPage(pagination.page)">
                                        ${pagination.page}
                                    </a>
                                </li>

                                {# 3 pages next to current page #}
                                <li v-for="i in range(pagination.page + 1, pagination.page + 4)" v-if="i < pagination.nbPages + 1">
                                    <a href="#" @click.prevent="goToPage(i)" class="page-number">${i}</a>
                                </li>

                                {# go to next page #}
                                <li :class="{disabled: pagination.page == pagination.nbPages}">
                                    <a href="#" @click.prevent="goToPage(pagination.page + 1)">
                                        <span class="glyphicon glyphicon-arrow-right"></span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>

    {% include '@App/common/basket-popup.html.twig' %}

    {# price slider template #}
    <template id="slider-template">
        <div class="clearfix">
            <div id="facet-slider"></div>
            <span class="facet-range-min" v-text="currentMin + ' €'"></span>
            <span class="facet-range-max" v-text="currentMax + ' €'"></span>
        </div>
    </template>

{% endblock %}

{% block scripts %}

    <script>
        var urlParameters;

        var search = new SearchClient('{{ apiBaseUrl }}catalog/search/products', '{{ apiBaseUrl }}/catalog/search/products/autocomplete');
        urlParameters = search.restoreSearchFromUrl();

        Vue.filter('round', function(value) {
            return Math.round(value);
        });

        var vm = new Vue({
            el: '#search-content',
            delimiters: ['${','}'],
            data: {
                loading: true,
                products: [],
                query: urlParameters.query || '',
                pagination: {
                    page: urlParameters.page || 1,
                    resultsPerPage: urlParameters.resultsPerPage || 12
                },
                filters: urlParameters.filters || {{ filters|default({})|json_encode|raw }},
                sorting: urlParameters.sorting || {},
                facets: [],
                currentUrl: window.location.href,
                geoFilter: urlParameters.geoFilter,
                calculatedPages: this.calculatePages,
            },
            methods: {
                refresh: function () {
                    this.loading = true;
                    var self = this;

                    search.searchProducts(this.query, this.pagination.page, this.pagination.resultsPerPage, this.filters, this.sorting, this.geoFilter, {}, function (response) {
                        self.loading = false;
                        self.products = response.results;
                        self.pagination = response.pagination;

                        // filter returned facets
                        Object.keys(response.facets).map(function (attributeId) {
                            var variants = response.facets[attributeId];
                            Object.keys(variants).map(function (variantId) {

                                // remove reverse attribute search (∅)
                                if (variantId === 'values') {
                                    for (var valueId in response.facets[attributeId][variantId]) {

                                        // remove ∅ variant
                                        if (valueId === '∅') {
                                            delete response.facets[attributeId][variantId][valueId];
                                        }
                                    }
                                }
                            });
                        });

                        self.facets = response.facets;

                        search.saveSearchInUrl(self.query, self.pagination.page, self.pagination.resultsPerPage, self.filters, self.sorting, self.geoFilter);

                        Vue.nextTick(function () {
                            // open category tree
                            self.refreshCategoryTree();
                        });
                    });
                },

                isChecked: function(facetName, variantName) {
                    return this.filters.hasOwnProperty(facetName) && this.filters[facetName] == variantName;
                },

                setSort: function(criteria, direction) {
                    if(criteria ===  null) {
                        this.sorting = null;
                    } else {
                        this.sorting = {};
                        this.sorting[criteria] = direction;
                    }
                    this.refresh();
                },

                goToPage: function (page) {
                    this.pagination.page = page;

                    // got to page top
                    var $container = $('html, body');
                    var $ref = $("#search-content");
                    $container.animate({ scrollTop: $ref.offset().top - $container.offset().top }, 'fast');

                    this.refresh();
                },

                toggleFilter: function (facetName, variantName) {
                    if (this.filters.hasOwnProperty(facetName) && this.filters[facetName] == variantName) {
                        // Clear filter
                        Vue.delete(this.filters, facetName);
                    } else {
                        // Set filter
                        Vue.set(this.filters, facetName, variantName);
                    }
                    this.refresh();
                },

                changeResultsNumber: function (_resultsPerPage) {
                    this.pagination.resultsPerPage = _resultsPerPage;
                    this.refresh();
                },

                updateNumericFilter: function (facetName, min, max) {
                    if (!this.filters[facetName]) {
                        this.filters[facetName] = {};
                    }
                    this.filters[facetName]['min'] = min;
                    this.filters[facetName]['max'] = max;
                    this.refresh();
                },

                clearFilters: function () {
                    // Clear everything except the selected category
                    for (var property in this.filters) {
                        if (property !== 'categories' && this.filters.hasOwnProperty(property)) {
                            Vue.delete(this.filters, property);
                        }
                    }

                    this.refresh();
                },

                imageStyle: function(product) {
                    return {
                        backgroundImage: 'url(' + this.imageUrl(product) + ')',
                        backgroundRepeat: 'no-repeat',
                        backgroundPosition: 'center',
                        backgroundSize: 'cover',
                    }
                },

                imageUrl: function (product) {
                    if(product.mainImage != null) {
                        return "{{ apiBaseUrl }}image/" + product.mainImage.id + "?w=500&h=500";
                    } else {
                        return "{{ asset('images/no-image.jpg') }}"
                    }
                },

                productUrl: function (product) {
                    categorySlugPath = [];
                    for (let i in product.categoryPath) {
                        categorySlugPath.push(product.categoryPath[i].slug);
                    }
                    return Routing.generate('product', {slug: product.slug, categoryPath: categorySlugPath.join('/')});
                },

                getDiscount: function(product) {
                    if(! product.crossedOutPrice) { return }

                    var oldPrice = product.crossedOutPrice;
                    var newPrice = product.minimumPrice;
                    var discount = ((newPrice - oldPrice) * 100 / oldPrice);
                    return Math.round(discount);
                },

                isNewProduct: function (product) {
                    var aWeekAgo = moment().subtract(7, 'days');
                    return moment.unix(product.createdAt).isAfter(aWeekAgo);
                },

                refreshCategoryTree: function() {
                    var $selectedCategory = $('#categories .selected-category');

                    // open category tree
                    $selectedCategory.parents('#categories .collapse').addClass('in');

                    // cleanup
                    $('#categories .selected-category').removeClass('selected-category');
                    $('#categories .selected').removeClass('selected');

                    // ...and select the right ones
                    $selectedCategory.addClass('selected-category');
                    $selectedCategory.find(".category-name").first().addClass('selected');
                    $selectedCategory.parents('#categories .category').children(".category-name").addClass('selected');

                    // switch root category plus/minus icon
                    var rootCategoryIcon = $selectedCategory.parents('#categories .category').find(".glyphicon-plus");
                    rootCategoryIcon.toggleClass("glyphicon-plus glyphicon-minus");
                },

                isCurrentCategory: function(categoryId) {
                    return this.filters['categories'] == categoryId;
                },

                /**
                 * Add the product to the basket
                 */
                submitBasket: function(product) {
                    var productInfo = {
                        name: product.name,
                        price: product.minimumPrice,
                        image: this.imageUrl(product),
                    };
                    $.ajax({
                        type: "POST",
                        url: "{{ path('basket_add_product') }}",
                        data: { declinationId: product.productId, quantity: 1 },
                        success: function(response) {
                            hydrateModal(productInfo, 1, response.message);
                        }
                    });
                },

                range: function (a, b) {
                    var rangeArray = [];

                    for(var i = a; i < b; i++) {
                        rangeArray.push(i);
                    }

                    return rangeArray;
                },
            },

            mounted: function () {
                // Trigger the first refresh
                this.refresh();
            },

            filters: {
                price: helper.formatPrice
            }
        });

        // price slider
        Vue.component('slider', {
            template: '#slider-template',
            props: ['min', 'max'],
            data: function () {
                return {
                    currentMin: this.min,
                    currentMax: this.max
                }
            },
            activated: function () {
                var view = this;

                $('#facet-slider').slider({
                    range: true,
                    min: Math.floor(view.min),
                    max: Math.ceil(view.max),
                    values: [view.currentMin, view.currentMax],
                    slide: function (event, ui) {
                        view.currentMin = ui.values[0];
                        view.currentMax = ui.values[1];
                    },
                    stop: function () {
                        // Dispatch an event to the main view to update the search
                        view.$emit('update', view.currentMin, view.currentMax);
                    }
                });
            }
        });

        {# icons behaviours #}
        {# ================ #}

        // filter titles icons
        $(".sidebar-items").on("click", ".sidebar-item-label > [data-toggle='collapse']", function() {
            $(this).find(".glyphicon").toggleClass("glyphicon-menu-down glyphicon-menu-up");
        });

        // categorie names icons
        $(".category-name").on("click", function() {
            $(this).find(".glyphicon-plus, .glyphicon-minus").toggleClass("glyphicon-plus glyphicon-minus");
        });

        $(".category-name").on("click", function() {
            $(this).addClass("selected");
        });
    </script>

{% endblock %}
