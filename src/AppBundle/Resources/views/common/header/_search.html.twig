{% set categories = categoryTree() %}

<div id="searchbar">
    <form action="{{ path('search') }}" class="searchbar" method="get" autocomplete="off">
        <input type="hidden" name="selected_category_id" v-model="selectedCategory.id">

        {# root category selector #}
        <div class="dropdown">
            <a href="#" data-toggle="dropdown">{{ 'search.searchbar.select_category'|trans }}</a>

            {# category list #}
            <ul class="dropdown-menu">

                {# default selection ('all categories') #}
                <li @click.prevent='selectCategory("", "{{'search.searchbar.all_categories'|trans}}")'>
                    {{ 'search.searchbar.all_categories'|trans }}
                </li>

                {# select category on click #}
                {% for category in categories %}
                    <li @click.prevent='selectCategory({{ category.category.id }}, "{{ category.category.name }}")'>
                        {{ category.category.name }}
                    </li>
                {% endfor %}
            </ul>
        </div>

        {# display selected category #}
        <div v-text="selectedCategory.name"></div>

        {# search input #}
        <input type="text" name="q" placeholder="{{ 'search.searchbar.search_input_placeholder'|trans }}" v-model="query" @keyup.esc="query = ''">

        {# 'search input' autocomplete suggestions #}
        <ul v-if="productSuggestions.length">
            <li v-for="suggestion in productSuggestions"
                @click.prevent="selectSuggestion(suggestion)"
                v-text="suggestion.name">
            </li>
        </ul>

        {# geoloc #}
        <input type="hidden" name="geo[lat]" v-model="geoFilter.lat">
        <input type="hidden" name="geo[lng]" v-model="geoFilter.lng">

        {# geoloc input #}
        <input type="text" name="geo[label]" v-model="geoFilter.label"
               id="geofilter-input" placeholder="{{ 'search.searchbar.geoloc_input_placeholder'|trans }}">

        {# submit button #}
        <button type="submit">{{ 'search.searchbar.button'|trans }}</button>
    </form>
</div>

{% block scripts %}
    <script>
        $(function () {

            var search = new SearchClient('{{ path('json_search') }}', '{{ apiBaseUrl }}catalog/search/products/autocomplete');
            var urlParameters = search.restoreSearchFromUrl(); // used in Search page

            new Vue({
                el: '#searchbar',

                data: {
                    selectedCategory: {
                        id: '{{ selectedCategory.id|default('')|e('js') }}' || "",
                        name: '{{ selectedCategory.name|default('')|lower|capitalize|e('js') }}' || "{{'all_categories'|trans}}"
                    },
                    productSuggestions: [],
                    query: urlParameters.query || '',
                    geoFilter: urlParameters.geoFilter || {},
                },

                methods: {
                    selectCategory: function (categoryId, categoryName) {
                        this.selectedCategory = {
                            id: categoryId,
                            name: categoryName
                        };
                    },

                    // _.debounce is a function provided by lodash
                    // to limit how often a particularly expensive operation can be run.
                    productAutocomplete: _.debounce(function () {

                            var self = this;

                            search.autocomplete(this.query, function (results) {

                                // don't display suggestions if there is only one and that already matches user input
                                if (results.length === 1 && results[0].name === self.query) {
                                    self.productSuggestions = [];
                                    return;
                                }

                                // fill suggestions
                                self.productSuggestions = results;
                            });
                        },
                        // how long to wait for user to stop typing (in ms)
                        200
                    ),

                    // watch user query input to display corresponding product suggestions (auto-completion)
                    initProductAutocomplete: function () {
                        var self = this;
                        var $queryInput = $('[name="q"]');
                        var $productSuggestions = $('.product-suggestions');

                        // show suggestions when:
                        // - user has typed at least 3 characters
                        // - there are three characters and user clicks in the input field
                        $queryInput.on('keyup click', function () {

                            if (self.query.length >= 3) {
                                $productSuggestions.removeClass('hidden');
                                self.productAutocomplete();

                            } else {
                                // don't fill/show suggestions if user input isn't specific enough
                                self.productSuggestions = [];
                            }
                        });
                    },

                    initGoogleMap: function () {
                        var labelInput = document.getElementById('geofilter-input');
                        this.googleMapsAutocomplete = new google.maps.places.Autocomplete(labelInput);
                        this.googleMapsAutocomplete.addListener('place_changed', this.geolocAutocompleted);
                    },

                    // called when the user autocompletes a place with Google Maps
                    geolocAutocompleted: function () {

                        var place = this.googleMapsAutocomplete.getPlace();

                        if (!place.geometry) {
                            // user entered a place that was not suggested and pressed Enter, or the request failed
                            this.geoFilter = {};
                            return;
                        }

                        this.geoFilter = {
                            lat: place.geometry.location.lat(),
                            lng: place.geometry.location.lng(),
                            label: place.name
                        };
                    },
                },

                mounted: function () {

                    // initialize the Google Maps autocomplete in search bar
                    this.initGoogleMap();

                    // input field behaviour
                    this.initProductAutocomplete();
                }
            });
        });
    </script>
{% endblock %}
