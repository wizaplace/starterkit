{% set categories = categoryTree() %}

<div id="search-bar" class="search-bar" v-cloak>
    <div class="container">
        <div class="wrapper">

            <form action="{{ path('search') }}" method="get" autocomplete="off">
                <input type="hidden" name="selected_category_id" v-model="selectedCategory.id">

                {# keyword and category query #}
                <div class="group">

                    {# category picker (display only root categories) #}
                    <div class="category-picker form-control" title="{{ 'select_a_category'|trans }}" tabindex="0">
                        <i class="picker-icon fa fa-list-alt"></i>
                        <span class="picker-label" v-text="selectedCategory.name"></span>
                        <i class="picker-arrow fa fa-caret-down"></i>

                        {# categories #}
                        <div class="categories">
                            <ul class="content">

                                {# default selects all categories #}
                                <li class="category"
                                    tabindex="0"
                                    :class="{ 'is-selected': selectedCategory.id == '' }"

                                    {# select category on click, space and enter #}
                                    @click.prevent='selectCategory("", "{{'all_categories'|trans}}")'
                                    @keydown.space.prevent='selectCategory("", "{{'all_categories'|trans}}")'
                                    @keydown.enter.prevent='selectCategory("", "{{'all_categories'|trans}}")'>

                                    <span>{{'all_categories'|trans}}</span>
                                </li>

                                {% for category in categories %}
                                    <li class="category"
                                        tabindex="0"
                                        :class="{ 'is-selected': selectedCategory.id == '{{ category.category.id }}' }"

                                        {# select category on click, space and enter #}
                                        @click.prevent='selectCategory({{ category.category.id }}, "{{ category.category.name|lower|capitalize }}")'
                                        @keydown.space.prevent='selectCategory({{ category.category.id }}, "{{ category.category.name|lower|capitalize }}")'
                                        @keydown.enter.prevent='selectCategory({{ category.category.id }}, "{{ category.category.name|lower|capitalize }}")'>

                                        <span>{{ category.category.name|lower|capitalize }}</span>
                                    </li>
                                {% endfor %}
                            </ul>
                        </div>
                    </div>

                    {# keyword input #}
                    <div class="keyword-input">
                        <input class="form-control" type="text" name="q" placeholder="{{ 'search_placeholder'|trans }}" v-model="query"
                               @keyup.esc="query = ''">

                        {# auto-complete suggestions #}
                        <div class="product-suggestions">
                            <ul class="content" v-if="productSuggestions.length">
                                <li class="suggestion"
                                    tabindex="0"
                                    v-for="suggestion in productSuggestions"
                                    v-text="suggestion.name"

                                    {# select suggestion on click, space, enter #}
                                    @click.prevent="selectSuggestion(suggestion)"
                                    @keydown.space.prevent="selectSuggestion(suggestion)"
                                    @keydown.enter.prevent="selectSuggestion(suggestion)">
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>

                {# geolocation #}
                <div class="group">

                    {# forward the geoloc to search page #}
                    <input type="hidden" name="geo[lat]" v-model="geoFilter.lat">
                    <input type="hidden" name="geo[lng]" v-model="geoFilter.lng">

                    {# city, department #}
                    <input type="text" name="geo[label]" v-model="geoFilter.label" class="form-control"
                           id="geofilter-label" placeholder="{{ 'geolocation_placeholder'|trans }}">

                    <em>ou</em>

                    {# geolocation button #}
                    <button type="button" class="btn btn-primary" @click="geoLocateMe">
                        <i class="fa fa-map-marker"></i>
                        <span class="hidden-xxs">{{ 'geolocate_self'|trans }}</span>
                    </button>
                </div>

                {# submit button #}
                <button class="btn btn-primary" type="submit">
                    <i class="fa fa-search"></i>
                    <span class="hidden-xxs">{{ 'search'|trans }}</span>
                </button>
            </form>
        </div>
    </div>
</div>

{% block scripts %}
    <script>
        $(function () {

            let search = new SearchClient('{{ apiBaseUrl }}catalog/search/products', '{{ apiBaseUrl }}catalog/search/products/autocomplete');
            let urlParameters = search.restoreSearchFromUrl(); // used in search page

            let vm = new Vue({
                el: '#search-bar',

                data: {
                    selectedCategory: {
                        id: '{{ selectedCategory.id|default('')|e('js') }}' || "",
                        name: '{{ selectedCategory.name|default('')|lower|capitalize|e('js') }}' || "{{'all_categories'|trans}}"
                    },
                    productSuggestions: [],
                    query: urlParameters.query || '',
                    geoFilter: urlParameters.geoFilter || {},
                },

                methods: {
                    initCategorySelection: function () {

                        let self = this;

                        // toggle selectable categories list
                        // =================================

                        let $categoryPicker = $('.category-picker');

                        // toggle categories list on click
                        $categoryPicker.on('click', function () {
                            $(this).toggleClass('is-active');
                        });

                        // hide categories list when user has clicked somewhere else
                        $(document).on('click', function (e) {

                            // doesn't hide if user has clicked on a listed category
                            let $target = $(e.target);

                            if ($target.closest('.category-picker').length) {
                                return;
                            }

                            $('.category-picker.is-active').removeClass('is-active');
                        });


                        // selectable categories keyboard navigation
                        $categoryPicker.on('focus', function () {

                            $(this).on('keydown', function (e) {

                                // toggle categories list if picker is focused and user press space or enter key
                                if (e.which === 13 || e.which === 32) {
                                    $(this).addClass('is-active');
                                    return false; // prevent page to scroll if space key was pressed or form to be submitted if enter key was pressed
                                }

                                // focus first selectable category
                                if (e.which === 40 && $(this).hasClass('is-active')) { // user pressed 'down arrow' key
                                    $(this).find('.category').first().focus();
                                    self.categoryKeyboardNav();
                                    return false; // prevent page to scroll down

                                } else if (e.which === 9 && $(this).hasClass('is-active')) { // user pressed tab key
                                    self.categoryKeyboardNav();
                                }
                            });
                        });
                    },

                    categoryKeyboardNav: function () {

                        let self = this;
                        let $categoryPicker = $('.category-picker');
                        let $selectableCategories = $categoryPicker .find('.category');

                        $selectableCategories.on('keydown', function (e) {

                            // if user pressed down arrow, focus next category
                            if (e.which === 40) {
                                $(this).next().focus();
                                return false; // prevent page to scroll down
                            }

                            // if user pressed up arrow key, focus previous category
                            if (e.which === 38) {
                                $(this).prev().focus();
                                return false; // prevent page to scroll up
                            }

                            // if user pressed esc key, reset selected category
                            if (e.which === 27) {
                                self.selectedCategory = {
                                    id: '',
                                    name: '{{'all_categories'|trans}}'
                                };
                                $categoryPicker.focus();
                                $categoryPicker.removeClass('is-active');
                            }

                            // if user pressed tab key and there are no more selectable category to focus on
                            if (e.which === 9) {
                                if (!$(this).next().length) {
                                    $categoryPicker.removeClass('is-active');
                                }
                            }
                        });
                    },

                    selectCategory: function (categoryId, categoryName) {
                        this.selectedCategory = {
                            id: categoryId,
                            name: categoryName
                        };

                        let $categoryPicker = $('.category-picker');

                        // focus back on category picker
                        $categoryPicker.focus();

                        // hide selectable categories
                        setTimeout(function () {
                            $categoryPicker.removeClass('is-active');
                        });
                    },

                    // _.debounce is a function provided by lodash
                    // to limit how often a particularly expensive operation can be run.
                    productAutocomplete: _.debounce(function () {

                            let self = this;

                            search.autocomplete(this.query, function (results) {

                                // don't display suggestions if there is only one and that already matches user input
                                if (results.length === 1 && results[0].name === self.query) {
                                    self.productSuggestions = [];
                                    return;
                                }

                                // fill suggestions
                                self.productSuggestions = results;
                            });
                        },
                        // how long to wait for user to stop typing (in ms)
                        200
                    ),

                    // watch user query input to display corresponding product suggestions (auto-completion)
                    initProductAutocomplete: function () {
                        let self = this;
                        let $queryInput = $('[name="q"]');
                        let $productSuggestions = $('.product-suggestions');

                        // show suggestions when:
                        // - user has typed at least 3 characters
                        // - there are three characters and user clicks in the input field
                        $queryInput.on('keyup click', function () {

                            if (self.query.length >= 3) {
                                $productSuggestions.removeClass('hidden');
                                self.productAutocomplete();

                            } else {
                                // don't fill/show suggestions if user input isn't specific enough
                                self.productSuggestions = [];
                            }
                        });

                        // hide suggestions when user has clicked somewhere else
                        $(document).on('click', function (e) {

                            // doesn't hide if user has clicked on a suggestion or in the input field
                            let $target = $(e.target);

                            if ($target.hasClass('suggestion') || $target[0] === $queryInput[0]) {
                                return;
                            }

                            $productSuggestions.addClass('hidden');
                        });

                        // accessibility (keyboard usage)
                        // ==============================

                        // highlight first suggestion
                        $queryInput.on('focus', function () {

                            // If conditions are met, some suggestions are displayed
                            // so now user can use down arrow key to highlight the first one
                            $(this).on('keydown', function (e) {

                                if (e.which === 40) { // 'down arrow'
                                    $('.suggestion').first().focus();

                                    // add event listeners on suggestions for keyboard navigation
                                    // called only here to avoid performance issues
                                    self.suggestionsKeyboardNav();

                                    // if user pressed tab key instead
                                } else if (e.which === 9) {
                                    self.suggestionsKeyboardNav();
                                }
                            });
                        });
                    },

                    // navigate through a list of selectable suggestions with keyboard
                    suggestionsKeyboardNav: function () {
                        let $queryInput = $('[name="q"]');
                        let $productSuggestions = $('.product-suggestions');

                        $('.suggestion').on('keydown', function (e) {

                            // if user pressed down arrow, focus next suggestion
                            if (e.which === 40) {
                                $(this).next().focus();
                                return false; // prevent page to scroll down
                            }

                            // if user pressed up arrow key, focus previous suggestion
                            if (e.which === 38) {
                                $(this).prev().focus();
                                return false; // prevent page to scroll up
                            }

                            // if user pressed esc key, focus (and reset) input field
                            if (e.which === 27) {
                                $queryInput.focus();
                            }

                            // if user pressed tab key and there are no other suggestion to focus on
                            if (e.which === 9) {
                                if (!$(this).next().length) {
                                    $productSuggestions.addClass('hidden');
                                }
                            }
                        });
                    },

                    selectSuggestion: function (suggestion) {

                        // update 'query' v-model and add suggestion into query input box
                        this.query = suggestion.name;

                        // hide suggestions
                        this.productSuggestions = [];

                        // focus back on input field
                        $('[name="q"]').focus();
                    },

                    initGoogleMap: function () {
                        let labelInput = document.getElementById('geofilter-label');
                        this.googleMapsAutocomplete = new google.maps.places.Autocomplete(labelInput);
                        this.googleMapsAutocomplete.addListener('place_changed', this.geolocAutocompleted);
                    },

                    geoLocateMe: function () {

                        if (!'geolocation' in navigator) {
                            notification.createAlert("{{ 'geolocation_impossible'|trans }}", "danger");
                            return;
                        }

                        navigator.geolocation.getCurrentPosition(function (position) {

                            vm.geoFilter = {
                                lat: position.coords.latitude,
                                lng: position.coords.longitude,
                                label: "{{ 'around_me'|trans }}"
                            };

                            // success message
                            notification.createAlert("{{ 'search_around_me_notification'|trans }}", "success");

                        }, function (error) {

                            switch (error.code) {
                                case error.PERMISSION_DENIED:
                                    notification.createAlert("{{ 'geolocation_forbidden'|trans }}", "danger");
                                    break;
                                default:
                                    notification.createAlert("{{ 'geolocation_error'|trans }}", "danger");
                                    break;
                            }
                        });
                    },

                    // called when the user autocompletes a place with Google Maps
                    geolocAutocompleted: function () {

                        let place = this.googleMapsAutocomplete.getPlace();

                        if (!place.geometry) {
                            // user entered a place that was not suggested and pressed Enter, or the request failed
                            this.geoFilter = {};
                            return;
                        }

                        this.geoFilter = {
                            lat: place.geometry.location.lat(),
                            lng: place.geometry.location.lng(),
                            label: place.name
                        };
                    },
                },

                mounted: function () {

                    // initialize the Google Maps autocomplete in search bar
                    this.initGoogleMap();

                    // input field behaviour
                    this.initProductAutocomplete();

                    // category list selection behaviour
                    this.initCategorySelection();
                }
            });
        });
    </script>
{% endblock %}
