{% extends '@App/layout.html.twig' %}

{% block body %}
    <section class="basket" id="basket">
        <div class="container">
            {# steps breadcrumb #}
            {% include '@App/checkout/steps.html.twig' with {step: 1} %}

            <hr>
            {% if basket.totalQuantity > 0 %}
                <basket-comment :comment="'{{ basket.comment }}'"></basket-comment>
            {% endif %}
            <hr>

            {# basket products are grouped per company #}
            {% if basket.companyGroups|default %}
                {% for companyGroup in basket.companyGroups %}

                    {# basket products are sub-grouped per shipping available options #}
                    {% for shippingGroup in companyGroup.shippingGroups %}
                        <div class="shipping-group" data-shipping-group-id="{{ shippingGroup.id }}">

                            {# display all products in this company/shipping group #}
                            {% for product in shippingGroup.items %}
                                <article class="basket-product" data-declination-id="{{ product.declinationId }}">

                                    {# product image #}
                                    <div class="image">
                                        {% if product.mainImage|default %}

                                            {# actual image (dimensions are constrained to avoid displaying a HiRes picture instead of a thumbnail) #}
                                            <img src="{{ product.mainImage|imageUrl(150, 150) }}" alt="">

                                        {% else %}
                                            {# product without image #}
                                            <div class="no-image">{{ 'no_image'|trans }}</div>
                                        {% endif %}
                                    </div>

                                    {# product details #}
                                    <div class="details">

                                        {# product name #}
                                        <div class="name">{{ product.productName }}</div>

                                        <p>{{ 'individual_price'|trans }}&nbsp;:</p>
                                        {# product price #}
                                        {% if product.crossedOutPrice|default %}
                                            <div class="crossed-out-price">
                                                {{ product.crossedOutPrice|price }}&nbsp;TTC
                                            </div>
                                        {% endif %}

                                        <div class="price">
                                            {{ product.individualPrice|price }}&nbsp;TTC
                                        </div>
                                    </div>

                                    {# quantity widget #}
                                    <article class="quantity">
                                        <div class="widget-label">{{ 'quantity'|trans }}</div>
                                        <div class="widget">

                                            <input type="number" min="0" pattern="[0-9]*" @change.prevent="changeProductQuantity" value="{{ product.quantity }}">
                                            <button @click.prevent="decreaseQuantity">-</button>
                                            <button @click.prevent="increaseQuantity">+</button>
                                            <button @click.prevent="removeFromBasket">{{ 'basket.action.remove_product'|trans }}</button>
                                        </div>
                                    </article>
                                </article>
                                <product-comment
                                    :declination-id="'{{ product.declinationId }}'"
                                    :comment="'{{ product.comment }}'"
                                ></product-comment>
                            {% endfor %}
                            <hr>

                            {# display shipping available options for this group of products #}
                            <select class="select-shipping" title="{{ 'select_shipping_method'|trans }}">
                            {% for shipping in shippingGroup.shippings %}
                                <option value="{{ shipping.id }}" {% if shipping.selected %}selected{% endif %} >
                                    {{ shipping.name }}
                                    {% if shipping.deliveryTime|default %}({{ shipping.deliveryTime }}){% endif %}
                                    -
                                    {{ shipping.price }}
                                </option>
                            {% endfor %}
                            </select>
                        </div>
                    {% endfor %}
                {% endfor %}
            {% endif %}

            {% if basket.totalQuantity > 0 %}
                <div class="container-fluid basket" style="background-color:#efefef">
                    <div class="col-md-6  col-md-offset-6">
                        <label>Code promo</label><br />
                        <input type="text" placeholder=" Votre code" />
                        <button class="btn btn-default active">Appliquer</button>
                        <div class="big-spacer"></div>

                        {# basket amount details #}
                        <table class="price-table" style="margin-left:-240px;">

                            {# total excluding taxes without shipping #}
                            <tr>
                                <td class="text-right"><div class="title">Sous total HT</div></td>
                                <td class="text-left"> {{ basket.subtotal|price }}&nbsp;{{ 'including_taxes'|trans }}</td> {# TODO modify with amount excl. taxes #}
                            </tr>

                            {% if basket.totalDiscount > 0 %}
                                <tr>
                                    <td class="text-right"><div class="title">Promotion HT</div></td>
                                    <td class="text-left">- {{ basket.totalDiscount|price }}&nbsp;{{ 'including_taxes'|trans }}</td> {# TODO modify with amount excl. taxes #}
                                </tr>
                            {% endif %}

                            {# shipping price #}
                            <tr>
                                <td class="text-right"><div class="title">Livraison HT</div></td>
                                <td class="text-left"> {{ basket.totalShipping|price }}&nbsp;{{ 'including_taxes'|trans }}</td> {# TODO modify with amount excl. taxes #}
                            </tr>

                            {# total excluding taxes #}
                            <tr>
                                <td class="text-right"><div class="title">Total HT</div></td>
                                <td class="text-left"> {{ basket.total|price }}&nbsp;{{ 'including_taxes'|trans }}</td>{# TODO modify with amount excl. taxes #}
                            </tr>

                            {# total including taxes #}
                            <tr>
                                <td class="text-right">
                                    <div class="big-spacer"></div>
                                    <div class="title text-blue">Total {{ 'including_taxes'|trans }}</div>
                                </td>
                                <td class="text-left"><div class="big-title text-blue">{{ basket.total|price }}&nbsp;{{ 'including_taxes'|trans }}</div></td>
                            </tr>

                            {# taxes detail #}
                            <tr>
                                <td class="text-right"><div class="title">Dont TVA et autres taxes</div></td>
                                <td class="text-left">{{ basket.totalTax|price }}</td>
                            </tr>
                        </table>
                        <div class="spacer"></div>

                        {% set nextStepLink = user|default ? path("checkout_addresses") : path("checkout_login") %}
                        <a href="{{ nextStepLink }}" class="btn btn-lg btn-primary">Valider mon panier</a>

                    </div>
                </div>
            {% else %}
                <p class="no-product">{{ 'your_basket_is_empty'|trans }}</p>
                <a href="{{ path('home') }}" class="btn btn-default">{{ 'continue_my_shopping'|trans }}</a>
            {% endif %}
        </div>
    </section>


    <template id="basket-comment">
        <div class="basket-comment">
            <p>{{ 'basket.comment.basket_content'|trans }}</p>
            <textarea name="comment-content" v-model="comment"></textarea>
            <button @click="updateComment()">{{ 'basket.comment.validate'|trans }}</button>
        </div>
    </template>
    <template id="product-comment">
        <div class="product-comment">
            <p>{{ 'basket.comment.product_content'|trans }}</p>
            <textarea name="comment-content" v-model="comment"></textarea>
            <button @click="updateComment()">{{ 'basket.comment.validate'|trans }}</button>
        </div>
    </template>

{% endblock %}

{% block scripts %}
    <script>

        {# shipping update / page reload #}
        {# ============================= #}

        $('.select-shipping').on('change', function() {

            // show overlay and spinner
            helper.displayLoadingSpinner();

            var shippingGroupId = $(this).closest('.shipping-group').data('shipping-group-id');
            var shippingId = $(this).find('option:selected').val();

            $.ajax({
                method: "POST",
                url: "{{ url('basket_update_shipping') }}",
                data: {
                    shippingGroupId: shippingGroupId,
                    shippingId: shippingId
                }
            }).done(function () {
                window.location.reload();
            });
        });

        Vue.component('basket-comment', {
            template: '#basket-comment',
            props: ['comment'],
            data: function () {
                return {
                }
            },
            methods: {
                updateComment: function(){
                    helper.displayLoadingSpinner();
                    $.ajax({
                        type: "POST",
                        url: "{{ path('basket_update_comments') }}",
                        data: { comment: this.comment },
                        success: function(response) {
                            helper.removeLoadingSpinner();
                        }
                    });
                }
            }
        });

        Vue.component('product-comment', {
            template: '#product-comment',
            props: ['declination-id', 'comment'],
            data: function () {
                return {
                }
            },
            methods: {
                updateComment: function(){
                    helper.displayLoadingSpinner();
                    $.ajax({
                        type: "POST",
                        url: "{{ path('basket_update_comments') }}",
                        data: { declinationId: this.declinationId, comment: this.comment },
                        success: function(response) {
                            helper.removeLoadingSpinner();
                        }
                    });
                }
            }
        });

        new Vue({
            el: '#basket',

            methods: {
                increaseQuantity: function (e) {

                    // gather data from event (clicked button or input value change)
                    var $inputField = $(e.currentTarget).closest('.quantity').find('[type="number"]');
                    var currentQuantity = parseInt($inputField.val());
                    var declinationId = $inputField.closest('.basket-product').data('declination-id');

                    // can't get lower than 0
                    if (currentQuantity < 1) {

                        // alert user
                        notification.createAlert('{{ 'basket.notification.error.invalid_quantity'|trans }}', "danger")

                        // restore previous valid quantity
                        $inputField.val(currentQuantity);

                        // do nothing else
                        return false;
                    }

                    // update quantity input value (before updating basket)
                    var newQuantity = currentQuantity + 1;
                    $inputField.val(newQuantity);

                    this.updateBasketQuantity(declinationId, newQuantity);
                },


                decreaseQuantity: function (e) {

                    // gather data from event (clicked button or input value change)
                    var $inputField = $(e.currentTarget).closest('.quantity').find('[type="number"]');
                    var currentQuantity = parseInt($inputField.val());
                    var declinationId = $inputField.closest('.basket-product').data('declination-id');

                    // can't get lower than 0
                    if (currentQuantity < 1) {

                        // alert user
                        notification.createAlert('{{ 'basket.notification.error.invalid_quantity'|trans }}', "danger")

                        // restore previous valid quantity
                        $inputField.val(currentQuantity);

                        // do nothing else
                        return false;
                    }

                    // update quantity input value (before updating basket)
                    var newQuantity = currentQuantity - 1;
                    $inputField.val(newQuantity);

                    this.updateBasketQuantity(declinationId, newQuantity);
                },

                // input value changed
                changeProductQuantity: function (e) {

                    // gather data from event (clicked button or input value change)
                    var $inputField = $(e.currentTarget).closest('.quantity').find('[type="number"]');
                    var currentQuantity = parseInt($inputField.val());
                    var declinationId = $inputField.closest('.basket-product').data('declination-id');

                    // can't get lower than 0
                    if (currentQuantity < 0) {

                        // alert user
                        notification.createAlert('{{ 'basket.notification.error.invalid_quantity'|trans }}', "danger")

                        // restore previous valid quantity
                        $inputField.val(currentQuantity);

                        // do nothing else
                        return false;
                    }

                    // newQuantity already corresponds to input's value
                    this.updateBasketQuantity(declinationId, currentQuantity);
                },

                removeFromBasket: function (e) {

                    // gather data from event (clicked button or input value change)
                    var $inputField = $(e.currentTarget).closest('.quantity').find('[type="number"]');
                    var declinationId = $inputField.closest('.basket-product').data('declination-id');

                    // update basket with "quantity = 0" will remove the product from basket
                    this.updateBasketQuantity(declinationId, 0);
                },

                updateBasketQuantity: function (declinationId, quantity) {
                    helper.displayLoadingSpinner();

                    $.ajax({
                        method: "POST",
                        url: "{{ url('basket_update_product_quantity') }}",
                        data: {
                            declinationId: declinationId,
                            quantity: quantity
                        }
                    }).done(function () {
                        window.location.reload();
                    }).fail(function () {
                        helper.removeLoadingSpinner();
                        notification.createAlert('{{ 'basket.notification.error.change_quantity'|trans }}', "danger")
                    });
                }
            }
        });
    </script>
{% endblock %}
