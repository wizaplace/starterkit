.popunder(@duration: .3s, @width: 300px, @position: "center", @arrow: false) {

    @arrow-width: 18px;
    @popunder-width: @width;
    @arrow-half: @arrow-width / 2;
    @popunder-half: @popunder-width / 2;

    position: absolute;
    z-index: 2;
    padding-top: .8em; // distance from parent

    @media screen and (max-width: @screen-md-max) {
        padding-top: .6em;
    }

    & when (@position = "left") {
        left: 0;
        right: ~"calc(-@{popunder-width} + 100%)";
    }

    & when (@position = "center") {
        left: ~"calc(-@{popunder-half} + 50%)";
        right: ~"calc(-@{popunder-half} + 50%)";
    }

    & when (@position = "right") {
        left: ~"calc(-@{popunder-width} + 100%)";
        right: 0;
    }

    & > .content {
        padding: 1em;

        background-color: @background-color-light;
        border-radius: @radius;
        box-shadow: @box-shadow;

        // toggle animation
        // ================
        animation: displayed @duration ease-in-out;

        @keyframes displayed {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        // top arrow
        &::before {
            font-family: FontAwesome;
            content: '\f0d8'; // fa-caret-up
            color: @background-color-light;
            position: absolute;
            font-size: 1.4em;
            top: -.3em;

            @media screen and (max-width: @screen-md-max) {
                top: -.44em;
            }

            & when (@arrow = false) {
                content: '';
            }

            & when (@position = "left") {
                left: 1em;
            }

            & when (@position = "center") {
                left: ~"calc(@{popunder-half} - @{arrow-half})";
            }

            & when (@position = "right") {
                left: ~"calc(@{popunder-width} - @{arrow-width} - 1em)";
            }
        }
    }
}

.popin-list-item {
    &:not(:first-of-type) {
        border-top: 1px solid @border-color;
    }

    display: block;
    font-size: 1em;
    padding: .25em;

    @media screen and (max-width: @screen-md-max) {
        font-size: 1.2em;
    }

    &:hover, &:focus, &.is-selected {
        background-color: fade(@color-tertiary, 10%);
        color: @color-hover-dark;
        outline: 0;
    }

    &.is-selected {
        &:hover {
            background-color: @color-light;
        }

        &:before {
            font-family: @font-family-icon-lib;
            content: @icon-selected;
            margin-right: .25em;
        }
    }
}

.remove-border-radius {
    .remove-border-radius-left();
    .remove-border-radius-right();
}

.remove-border-radius-left {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
}

.remove-border-radius-right {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
}

.remove-border-radius-top {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
}

.remove-border-radius-bottom {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
}

.has-left-icon(@distance: .5em) {
    & > i {
        margin-right: @distance;
    }
}

.has-right-icon(@distance: .5em) {
    & > i {
        margin-left: @distance;
    }
}

.underlined() {
    text-decoration: underline;

    &:hover {
        text-decoration: underline;
    }

    &:visited {
        text-decoration: underline;

        &:hover {
            text-decoration: underline;
        }
    }

    &:focus, &:active {
        text-decoration: underline;
    }
}

.not-underlined() {
    text-decoration: none;

    &:hover {
        text-decoration: none;
    }

    &:visited {
        text-decoration: none;

        &:hover {
            text-decoration: none;
        }
    }

    &:focus, &:active {
        text-decoration: none;
    }
}

.anchor(@color-variant: "dark", @state-option: true) {
    cursor: pointer;

    .state-option() when (@state-option = false) {
        @color: "color-@{color-variant}";
        @color-hover: "color-@{color-variant}";
        @color-active: "color-@{color-variant}";
        @color-visited: "color-@{color-variant}";
    }

    .state-option() when (@state-option = true) {
        @color: "anchor-color-@{color-variant}";
        @color-hover: "anchor-color-hover-@{color-variant}";
        @color-active: "anchor-color-active-@{color-variant}";
        @color-visited: "anchor-color-visited-@{color-variant}";
    }

    // assign variable names
    .state-option();

    color: @@color;

    &:hover {
        color: @@color-hover;
    }

    &:visited {
        text-decoration: none;
        color: @@color-visited;

        &:hover {
            text-decoration: none;
            color: @@color-hover;
        }
    }

    &:focus, &:active {
        text-decoration: none;
        color: @@color-active;
    }
}

.checkable(@icon, @checked-icon) {
    .input-label {
        cursor: pointer;

        // unchecked version
        &::before {
            font-family: @font-family-icon;
            margin-right: .5em;
            vertical-align: -13%; // optically better than 'middle'
            font-size: 1.5em;
            color: @color-medium;
            content: @icon;
            transition: all .3s ease;
        }
    }

    [type="checkbox"], [type="radio"] {

        // hide original checkable input
        position: absolute;
        left: 0;
        height: 1px;
        width: 1px;
        opacity: 0;

        // checked version
        &:checked {

            // change label and input color
            & ~ .input-label,
            & ~ .input-label:before {
                color: @color-tertiary;
            }

            // change input icon
            & ~ .input-label:before {
                content: @checked-icon;
            }
        }
    }
}
